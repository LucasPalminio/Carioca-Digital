package com.lucas.Guis;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.lucas.Carioca_Digital.Jugador;
import com.lucas.Carioca_Digital.Ronda;
import com.lucas.Guis.RondaGUI.MesaGUI;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class MenuJuego extends JFrame implements ActionListener {
    private JPanel panel1;
    private JButton volverAlMenúPrincipalButton;
    private JButton comenzarLaPartidaButton;
    private JComboBox rondaInicialComboBox;
    private JComboBox rondaFinalComboBox;
    private JComboBox nroJugadoresComboBox;
    private JTextField jugador1textField;
    private JTextField jugador2textField;
    private JTextField jugador3textField;
    private JTextField jugador4textField;
    private final Color blanco = new Color(255, 255, 255);
    private final Color rojo = new Color(255, 0, 0);
    private ArrayList<Jugador> jugadores = new ArrayList<>();
    int nivelInicial;
    int nivelFinal;


    public static void main(String[] args) {
        new MenuJuego().setVisible(true);
    }

    public MenuJuego() {

        $$$setupUI$$$();
        add(panel1);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.pack();

        bloquearJTextFields();

        volverAlMenúPrincipalButton.addActionListener(this);
        comenzarLaPartidaButton.addActionListener(this);
        rondaInicialComboBox.addActionListener(this);
        rondaFinalComboBox.addActionListener(this);
        nroJugadoresComboBox.addActionListener(this);
        jugador1textField.addActionListener(this);
        jugador2textField.addActionListener(this);
        jugador3textField.addActionListener(this);
        jugador4textField.addActionListener(this);


    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setBackground(new Color(-14786275));
        panel1.setPreferredSize(new Dimension(1360, 680));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        panel2.setBackground(new Color(-13989079));
        panel1.add(panel2, BorderLayout.NORTH);
        volverAlMenúPrincipalButton = new JButton();
        volverAlMenúPrincipalButton.setText("Volver al menú principal");
        panel2.add(volverAlMenúPrincipalButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comenzarLaPartidaButton = new JButton();
        comenzarLaPartidaButton.setText("Comenzar la partida");
        panel2.add(comenzarLaPartidaButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-1));
        label1.setText("Comenzar una partida");
        panel2.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setBackground(new Color(-14786275));
        panel1.add(panel3, BorderLayout.CENTER);
        final JLabel label2 = new JLabel();
        label2.setForeground(new Color(-1));
        label2.setText("Nombre del jugador 1");
        panel3.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jugador1textField = new JTextField();
        panel3.add(jugador1textField, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setForeground(new Color(-1));
        label3.setText("Número de jugadores");
        panel3.add(label3, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setForeground(new Color(-1));
        label4.setText("Nombre del jugador 2");
        panel3.add(label4, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setForeground(new Color(-1));
        label5.setText("Nombre del jugador 3");
        panel3.add(label5, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setForeground(new Color(-1));
        label6.setText("Nombre del jugador 4");
        panel3.add(label6, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jugador2textField = new JTextField();
        panel3.add(jugador2textField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        jugador3textField = new JTextField();
        panel3.add(jugador3textField, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        jugador4textField = new JTextField();
        panel3.add(jugador4textField, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        panel3.add(rondaFinalComboBox, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel3.add(rondaInicialComboBox, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setForeground(new Color(-1));
        label7.setText("Ronda final");
        panel3.add(label7, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setForeground(new Color(-1));
        label8.setText("Ronda inicial");
        panel3.add(label8, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel3.add(nroJugadoresComboBox, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        String[] opcionesRondaInicialComboBox = {"1", "2", "3", "4", "5", "6"};
        rondaInicialComboBox = new JComboBox(opcionesRondaInicialComboBox);
        String[] opcionesRondaFinalComboBox = {"1", "2", "3", "4", "5", "6"};
        rondaFinalComboBox = new JComboBox(opcionesRondaFinalComboBox);
        String[] opcionesNroJugadoresComboBox = {"2", "3", "4"};
        nroJugadoresComboBox = new JComboBox(opcionesNroJugadoresComboBox);
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        nivelInicial = Integer.parseInt(rondaInicialComboBox.getSelectedItem().toString()) - 1;
        nivelFinal = Integer.parseInt(rondaFinalComboBox.getSelectedItem().toString()) - 1;
        int nroJugadores = Integer.parseInt(nroJugadoresComboBox.getSelectedItem().toString());
        if (e.getSource() == volverAlMenúPrincipalButton) {
            this.setVisible(false);
            new MenuPrincipalGUI().setVisible(true);
            this.dispose();
        }
        if (e.getSource() == comenzarLaPartidaButton) {

            if (Integer.parseInt(rondaFinalComboBox.getSelectedItem().toString()) - Integer.parseInt(rondaInicialComboBox.getSelectedItem().toString()) >= 0) {
                switch (nroJugadores) {
                    case 2:
                        if (!jugador1textField.getText().trim().equals("") && !jugador2textField.getText().trim().equals("")) {
                            jugadores.add(new Jugador(jugador1textField.getText()));
                            jugadores.add(new Jugador(jugador2textField.getText()));

                            Ronda rondaActual = new Ronda(jugadores, nivelInicial);
                            MesaGUI mesaActual = new MesaGUI(rondaActual, nivelFinal);
                            mesaActual.setVisible(true);
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(null, "Faltan nombres de jugadores");
                        }
                        break;
                    case 3:
                        if (!jugador1textField.getText().trim().equals("") && !jugador2textField.getText().trim().equals("") && !jugador3textField.getText().trim().equals("")) {
                            jugadores.add(new Jugador(jugador1textField.getText()));
                            jugadores.add(new Jugador(jugador2textField.getText()));
                            jugadores.add(new Jugador(jugador3textField.getText()));

                            Ronda rondaActual = new Ronda(jugadores, nivelInicial);
                            MesaGUI mesaActual = new MesaGUI(rondaActual, nivelFinal);
                            mesaActual.setVisible(true);
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(null, "Faltan nombres de jugadores");
                        }
                        break;
                    case 4:
                        if (!jugador1textField.getText().trim().equals("") && !jugador2textField.getText().trim().equals("") && !jugador3textField.getText().trim().equals("") && !jugador4textField.getText().trim().equals("")) {
                            jugadores.add(new Jugador(jugador1textField.getText()));
                            jugadores.add(new Jugador(jugador2textField.getText()));
                            jugadores.add(new Jugador(jugador3textField.getText()));
                            jugadores.add(new Jugador(jugador4textField.getText()));

                            Ronda rondaActual = new Ronda(jugadores, nivelInicial);
                            MesaGUI mesaActual = new MesaGUI(rondaActual, nivelFinal);
                            mesaActual.setVisible(true);
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(null, "Faltan nombres de jugadores");
                        }
                        break;
                }
            } else {
                JOptionPane.showMessageDialog(null, "La ronda inicial no puede ser mayor que la final");
            }
        }
        bloquearJTextFields();


    }

    private void bloquearJTextFields() {

        if (Integer.parseInt(nroJugadoresComboBox.getSelectedItem().toString()) < 3) {
            jugador3textField.setText("");
            jugador3textField.setEditable(false);
            jugador3textField.setBackground(rojo);
        } else {
            jugador3textField.setEditable(true);
            jugador3textField.setBackground(blanco);
        }
        if (Integer.parseInt(nroJugadoresComboBox.getSelectedItem().toString()) < 4) {
            jugador4textField.setText("");
            jugador4textField.setEditable(false);
            jugador4textField.setBackground(rojo);
        } else {
            jugador4textField.setEditable(true);
            jugador4textField.setBackground(blanco);
        }
    }
}
