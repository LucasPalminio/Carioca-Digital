package com.lucas.gui.ronda_gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.lucas.carioca_digital.Carta;
import com.lucas.carioca_digital.Ronda;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * Esta clase sirve para acceder al menú Debug pensado para el desarrollo del programa
 */
public class MenuDebugGUI extends JFrame implements ActionListener {
    /**
     * ComboBox que permite seleccionar el palo de la carta que se desea crear
     */
    private JComboBox paloComboBox1;
    /**
     * ComboBox que permite seleccionar el valor de la carta que se desea crear
     */
    private JComboBox valorComboBox2;
    /**
     * Botón que sirve para crear la carta según las especificaciones dadas
     */
    private JButton crearCartaButton;
    /**
     * Tabla que muestra las cartas de cada jugador
     */
    private JTable table1;
    /**
     * Botón usado para eliminar la carta seleccionada de la mano del jugador actual
     */
    private JButton eliminarCartaButton;
    /**
     * Lista que muestra las cartas de la mano del jugador actual
     */
    private JList cartasList1;
    /**
     * Botón que permite confirmar los cambios y volver a la partida
     */
    private JButton confirmarCambiosButton;
    /**
     * Panel principal que muestra la ventana del menú Debug
     */
    private JPanel panelPadre;
    /**
     * Etiqueta que muestra una vista anticipada de la carta a crear
     */
    private JLabel cartaLabel;
    /**
     * Ronda que se juega actualmente
     */
    private final Ronda ronda;
    /**
     * Mesa que será afectada por los cambios en menú debug
     */
    private final MesaGUI mesaGUI;
    /**
     * Arraylist que contiene las cartas del jugador actual
     */
    private final ArrayList<Carta> cartasJugadorArrayList;
    /**
     * Carta que puede ser creada indicando ciertas especificaciones
     */
    private Carta cartaACrear;

    /**
     * Este método crea la ventana para acceder al menu Debug
     * @param mesaGUI Mesa en la que se está jugando actualmente
     */
    public MenuDebugGUI(MesaGUI mesaGUI) {
        this.mesaGUI = mesaGUI;
        this.ronda = mesaGUI.getRonda();
        this.cartasJugadorArrayList = new ArrayList<>(ronda.getJugadorActual().getCartas());

        $$$setupUI$$$();

        valorComboBox2.addActionListener(this);
        paloComboBox1.addActionListener(this);
        crearCartaButton.addActionListener(this);
        eliminarCartaButton.addActionListener(this);
        confirmarCambiosButton.addActionListener(this);

        this.add(panelPadre);

        valorComboBoxEvento();

    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panelPadre = new JPanel();
        panelPadre.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        panelPadre.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(null, "Crear Carta", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panel1.add(paloComboBox1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        valorComboBox2.setEnabled(true);
        panel1.add(valorComboBox2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        crearCartaButton = new JButton();
        crearCartaButton.setText("Crear Carta");
        panel1.add(crearCartaButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Palo");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Valor");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cartaLabel = new JLabel();
        cartaLabel.setText("");
        panel1.add(cartaLabel, new GridConstraints(0, 2, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelPadre.add(panel2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(null, "Eliminar Carta", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(0, 0, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(cartasList1);
        eliminarCartaButton = new JButton();
        eliminarCartaButton.setText("Eliminar Carta");
        panel2.add(eliminarCartaButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelPadre.add(panel3, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        scrollPane2.setHorizontalScrollBarPolicy(32);
        scrollPane2.setVerticalScrollBarPolicy(22);
        panel3.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane2.setBorder(BorderFactory.createTitledBorder(null, "Cartas Jugadores", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        table1.setAutoResizeMode(4);
        scrollPane2.setViewportView(table1);
        confirmarCambiosButton = new JButton();
        confirmarCambiosButton.setText("Confirmar Cambios");
        panel3.add(confirmarCambiosButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }


    public JComponent $$$getRootComponent$$$() {
        return panelPadre;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel(Carta.PALOS_SIMBOLOS);
        comboBoxModel.addElement("JKR");
        paloComboBox1 = new JComboBox(comboBoxModel);
        valorComboBox2 = new JComboBox(Carta.VALORES);


        DefaultListModel cartasList1Model = new DefaultListModel();

        for (Carta carta : cartasJugadorArrayList) {
            cartasList1Model.addElement(carta);
        }
        cartasList1 = new JList(cartasList1Model);
        cartasList1.setCellRenderer(new CartaListCellRendererComponent());

        String[] columnas = {"Nombre", "Cartas"};
        DefaultTableModel tableModel = new DefaultTableModel(ronda.getArrayObjectCartasJugadores(), columnas);
        table1 = new JTable(tableModel);


        setBounds(0, 0, 800, 600);
        setLocationRelativeTo(null);
        setTitle("DebugMenu");

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == paloComboBox1) paloComboBoxEvento();
        if (e.getSource() == valorComboBox2) valorComboBoxEvento();
        if (e.getSource() == crearCartaButton) crearCartaButtonEvento();
        if (e.getSource() == eliminarCartaButton) eliminarCartaButtonEvento();
        if (e.getSource() == confirmarCambiosButton) confirmarCambiosButtonEvento();
    }

    /**
     * Este método permite seleccionar el palo de la carta a crear
     */
    private void paloComboBoxEvento() {

        if (paloComboBox1.getSelectedItem().equals("JKR")) {
            cartaACrear = new Carta("JKR", "");
            cartaLabel.setIcon(cartaACrear.getIcon());
            valorComboBox2.setEnabled(false);

        } else {
            valorComboBox2.setEnabled(true);
            valorComboBoxEvento();
        }
    }

    /**
     * Este método permite seleccionar el valor de la carta a crear
     */
    private void valorComboBoxEvento() {
        int indicePalo = paloComboBox1.getSelectedIndex();
        String palo = Carta.PALOS[indicePalo];
        String valor = (String) valorComboBox2.getSelectedItem();
        cartaACrear = new Carta(palo, valor);
        cartaLabel.setIcon(cartaACrear.getIcon());
    }

    /**
     * Este método permite crear la carta según la información seleccionada
     */
    private void crearCartaButtonEvento() {
        if (cartaACrear != null) {
            cartasJugadorArrayList.add(0, cartaACrear);
            actualizarListaCartas();
        }
    }

    /**
     * Este método elimina la carta seleccionada de la mano del jugador actual
     */
    private void eliminarCartaButtonEvento() {
        if (cartasList1.getSelectedIndices().length >= 1) {
            for (Carta cartaAEliminar : (ArrayList<Carta>) cartasList1.getSelectedValuesList()) {
                cartasJugadorArrayList.remove(cartaAEliminar);

            }
            actualizarListaCartas();
        } else {
            JOptionPane.showMessageDialog(this, "Error, no ha seleccionado una carta a borrar", "Error borrar carta", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Este método permite salir del menú Debug y volver a la partida con los cambios hechos
     */
    private void confirmarCambiosButtonEvento() {
        int opcion = JOptionPane.showConfirmDialog(this, "¿Desea confirmar los cambios y salir?", "Confirmar Cambios", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {
            ronda.getJugadorActual().setCartas(cartasJugadorArrayList);
            mesaGUI.setRonda(ronda);
            mesaGUI.actualizar_CartasJugadorActualLista();
            this.dispose();
        }

    }

    /**
     * Este método actualiza la lista de cartas que contiene la mano del jugador actual
     */
    private void actualizarListaCartas() {

        DefaultListModel cartasList1Model = new DefaultListModel();

        for (Carta carta : cartasJugadorArrayList) {
            cartasList1Model.addElement(carta);
        }
        cartasList1.setModel(cartasList1Model);
    }
}

