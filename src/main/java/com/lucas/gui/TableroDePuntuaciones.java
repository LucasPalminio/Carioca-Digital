package com.lucas.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.lucas.carioca_digital.TableroDePuntuacionesModelo;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class TableroDePuntuaciones extends JFrame implements ActionListener {



    /**
     * es para crear un panel
     */
    private JPanel panel1;

    /**
     ??
     */
    private JButton volverPuntajesButton;
    /**
     * es para crear una tabla
     */
    private JTable table1;

    /**
     * etiqueta con mensaje
     */
    private JLabel noDisponibleLabel;


    /**
     * Este método un panel con tablas en donde se mostraran las puntuaciones de los jugadorea
     */
    public TableroDePuntuaciones() {
        $$$setupUI$$$();
        add(panel1);

        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.pack();
        volverPuntajesButton.addActionListener(this);
        TableroDePuntuacionesModelo tablaModelo = new TableroDePuntuacionesModelo();
        if (tablaModelo.getRowCount() == 0) {
            table1.setVisible(false);
            this.setVisible(false);
            this.dispose();
        } else {
            noDisponibleLabel.setVisible(false);
            table1.setModel(tablaModelo);
        }
    }

    /**
     *  Este método hace visible el tablero de puntuaciones
     * @param args se ocupa para enviarle valores al programa
     */
    public static void main(String[] args) {
        new TableroDePuntuaciones().setVisible(true);
    }
    /**
     * Este método es para crear una gui personalizada
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setBackground(new Color(-14786275));
        panel1.setMinimumSize(new Dimension(1360, 680));
        panel1.setPreferredSize(new Dimension(1360, 680));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-14123225));
        panel1.add(panel2, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-1));
        label1.setText("Mejor puntaje");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        volverPuntajesButton = new JButton();
        volverPuntajesButton.setText("Regresar al menú principal");
        panel2.add(volverPuntajesButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(20, 20, 20, 20), -1, -1));
        panel3.setBackground(new Color(-14786275));
        panel1.add(panel3, BorderLayout.CENTER);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scrollPane1.setViewportView(table1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    /**
     *
     */
    private void createUIComponents() {
        // TODO: place custom component creation code here



    }

    /**
     * Este método hace visible el menu principal
     * @param e permite acceder a las propiedades de ActionEven
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == volverPuntajesButton) {
            this.setVisible(false);
            new MenuPrincipalGUI().setVisible(true);
            this.dispose();
        }
    }
}
