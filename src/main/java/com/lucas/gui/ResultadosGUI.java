package com.lucas.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.lucas.carioca_digital.Jugador;
import com.lucas.carioca_digital.Reglas;
import com.lucas.datos.GestorArchivos;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Comparator;

public class ResultadosGUI extends JFrame implements ActionListener {


    private JPanel panel1;
    private JLabel puntaje1Label;
    private JLabel puntaje2Label;
    private JLabel puntaje3Label;
    private JLabel puntaje4Label;
    private JButton volverResultadosButton;
    private JLabel jugador3Label;
    private JLabel jugador4Label;
    private JLabel iconoLabel;
    private JLabel jugador1Label;
    private JLabel jugador2Label;
    ImageIcon icono = new ImageIcon("src//images//varios//cartasMoviendose.gif");
    ArrayList<Integer> puntajes;
    ArrayList<Jugador> jugadores;


    public ResultadosGUI(ArrayList<Jugador> jugadores, ArrayList<Integer> puntajes) {
        add(panel1);
        iconoLabel.setIcon(icono);
        this.puntajes = puntajes;
        puntaje1Label.setText(String.valueOf(puntajes.get(0)));
        puntaje2Label.setText(String.valueOf(puntajes.get(1)));
        jugador1Label.setText(jugadores.get(0).getNombre());
        jugador2Label.setText(jugadores.get(1).getNombre());
        if (puntajes.size() < 3) {
            puntaje3Label.setVisible(false);
            jugador3Label.setVisible(false);
        } else {
            puntaje3Label.setText(String.valueOf(puntajes.get(2)));
            jugador3Label.setText(jugadores.get(2).getNombre());
        }
        if (puntajes.size() < 4) {
            puntaje4Label.setVisible(false);
            jugador4Label.setVisible(false);
        } else {
            puntaje4Label.setText(String.valueOf(puntajes.get(3)));
            jugador4Label.setText(jugadores.get(3).getNombre());
        }
        this.pack();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        volverResultadosButton.addActionListener(this);
        jugadores.sort(new Comparator<Jugador>() {
            @Override
            public int compare(Jugador o1, Jugador o2) {
                if (o1.getPuntaje() < o2.getPuntaje()) {
                    return -1;
                }
                if (o1.getPuntaje() > o2.getPuntaje()) {
                    return 1;
                }
                return 0;
            }
        });
        if (jugadores.get(0).getPuntaje() > Reglas.getMejorPuntaje()) {
            Reglas.setMejorPuntaje(puntajes.get(jugadores.get(0).getPuntaje()));
            Reglas.setNombreMejorPuntaje(jugadores.get(0).getNombre());
            GestorArchivos gestor = new GestorArchivos();

            gestor.escribir(Reglas.getNombreMejorPuntaje(), "jugadorMayor");
            gestor.escribir(String.valueOf(Reglas.getMejorPuntaje()), "puntajeMayor");
        }
    }

    public static void main(String[] args) {
        ArrayList<Integer> ejemplo = new ArrayList<>();
        ejemplo.add(2);
        ejemplo.add(3);
        ejemplo.add(4);
        ArrayList<Jugador> jugadores = new ArrayList<>();
        jugadores.add(new Jugador("Pedro"));
        jugadores.add(new Jugador("Jose"));
        jugadores.add(new Jugador("Juan"));
        new ResultadosGUI(jugadores, ejemplo).setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {


        if (e.getSource() == volverResultadosButton) {
            new MenuPrincipalGUI().setVisible(true);
            this.dispose();
        }

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setBackground(new Color(-14786275));
        panel1.setOpaque(false);
        panel1.setPreferredSize(new Dimension(1360, 680));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-14786275));
        panel1.add(panel2, BorderLayout.CENTER);
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-1));
        label1.setText("Resultados de los puntajes");
        panel2.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jugador1Label = new JLabel();
        jugador1Label.setForeground(new Color(-1));
        jugador1Label.setText("Jugador 1");
        panel2.add(jugador1Label, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        puntaje1Label = new JLabel();
        puntaje1Label.setForeground(new Color(-1));
        puntaje1Label.setText("Label");
        panel2.add(puntaje1Label, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jugador3Label = new JLabel();
        jugador3Label.setForeground(new Color(-1));
        jugador3Label.setText("Jugador 3");
        panel2.add(jugador3Label, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        puntaje3Label = new JLabel();
        puntaje3Label.setForeground(new Color(-1));
        puntaje3Label.setText("Label");
        panel2.add(puntaje3Label, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jugador2Label = new JLabel();
        jugador2Label.setForeground(new Color(-1));
        jugador2Label.setText("Jugador 2");
        panel2.add(jugador2Label, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        puntaje2Label = new JLabel();
        puntaje2Label.setForeground(new Color(-1));
        puntaje2Label.setText("Label");
        panel2.add(puntaje2Label, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jugador4Label = new JLabel();
        jugador4Label.setForeground(new Color(-1));
        jugador4Label.setText("Jugador 4");
        panel2.add(jugador4Label, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        puntaje4Label = new JLabel();
        puntaje4Label.setForeground(new Color(-1));
        puntaje4Label.setText("Label");
        panel2.add(puntaje4Label, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        iconoLabel = new JLabel();
        iconoLabel.setText("");
        panel2.add(iconoLabel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        volverResultadosButton = new JButton();
        volverResultadosButton.setText("Volver al menÃº principal");
        panel2.add(volverResultadosButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
